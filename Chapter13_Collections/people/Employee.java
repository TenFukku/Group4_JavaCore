package people;

import interfaces.Callback;
import interfaces.CustomCloneable;
import interfaces.Promotable;
import java.util.Comparator;

public class Employee extends Person implements Promotable {
    private double salary;
    private String position;
    private Callback promotionCallback;

    public Employee(String name, double salary) {
        super(name);
        this.salary = salary;
        this.position = "Nh√¢n vi√™n";
    }

    @Override
    public String getDescription() {
        return "Nh√¢n vi√™n v·ªõi l∆∞∆°ng: " + formatVND((int)salary);
    }

    public final double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }

    public String getPosition() {
        return position;
    }

    public void setPosition(String position) {
        this.position = position;
    }

    public Callback getPromotionCallback() {
        return promotionCallback;
    }

    public void setPromotionCallback(Callback callback) {
        this.promotionCallback = callback;
    }

    // S·ª≠ d·ª•ng Comparator so s√°nh theo l∆∞∆°ng
    public static final Comparator<Employee> BY_SALARY = Comparator.comparingDouble(Employee::getSalary);
    // S·ª≠ d·ª•ng Comparator so s√°nh theo t√™n
    public static final Comparator<Employee> BY_NAME = Comparator.comparing(Employee::getName, String.CASE_INSENSITIVE_ORDER);

    // S·ª≠ d·ª•ng Override equals/hashCode ƒë·ªÉ ph√π h·ª£p cho Set/Map
    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (!(other instanceof Employee)) return false;
        Employee e = (Employee) other;
        return this.getName().equals(e.getName()) && Double.compare(this.salary, e.salary) == 0;
    }

    @Override
    public int hashCode() {
        return getName().hashCode() * 31 + Double.hashCode(salary);
    }

    // S·ª≠ d·ª•ng Implement Promotable interface
    @Override
    public boolean canPromote() {
        return salary < 8000000; 
    }

    @Override
    public void promote() {
        if (canPromote()) {
            double oldSalary = salary;
            salary *= 1.2; // TƒÉng l∆∞∆°ng 20%
            position = "Nh√¢n vi√™n cao c·∫•p";
            
            if (promotionCallback != null) {
                promotionCallback.onSuccess("ThƒÉng ch·ª©c th√†nh c√¥ng! L∆∞∆°ng m·ªõi: " + formatVND((int)salary));
            }
        } else {
            if (promotionCallback != null) {
                promotionCallback.onError("Kh√¥ng th·ªÉ thƒÉng ch·ª©c - l∆∞∆°ng ƒë√£ qu√° cao");
            }
        }
    }

    @Override
    public String getPromotionInfo() {
        return "V·ªã tr√≠: " + position + ", C√≥ th·ªÉ thƒÉng ch·ª©c: " + canPromote();
    }

    // S·ª≠ d·ª•ng Implement Payable interface
    @Override
    public double calculateSalary() {
        return salary;
    }

    @Override
    public String getPaymentInfo() {
        return "L∆∞∆°ng c∆° b·∫£n: " + formatVND((int)salary);
    }

    // S·ª≠ d·ª•ng Implement CustomCloneable interface
    @Override
    public CustomCloneable createClone() {
        return new Employee(getName(), this.salary);
    }

    @Override
    public boolean isCloneable() {
        return true;
    }

    // S·ª≠ d·ª•ng Inner class ƒë·ªÉ qu·∫£n l√Ω l∆∞∆°ng
    public class SalaryManager {
        private final double MIN_SALARY = 3000000; // S·ª≠ d·ª•ng final variable trong inner class
        
        public boolean isValidSalary(double salary) {
            return salary >= MIN_SALARY;
        }
        
        public void adjustSalary(double newSalary) {
            if (isValidSalary(newSalary)) {
                Employee.this.salary = newSalary;
            }
        }
        
        public String getSalaryInfo() {
            return "L∆∞∆°ng hi·ªán t·∫°i: " + formatVND((int)Employee.this.salary);
        }
    }

    // S·ª≠ d·ª•ng Anonymous inner class cho callback
    public void setDefaultCallback() {
        this.promotionCallback = new Callback() {
            @Override
            public void onSuccess(String message) {
                System.out.println("‚úÖ " + message);
            }
            
            @Override
            public void onError(String error) {
                System.out.println("‚ùå " + error);
            }
            
            @Override
            public void onProgress(int percentage) {
                System.out.println("üìä Ti·∫øn ƒë·ªô: " + percentage + "%");
            }
        };
    }
    
    private String formatVND(int amount) {
        return String.format("%,d VND", amount);
    }
}
